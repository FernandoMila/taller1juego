#include "ranking.h"
#include <fstream>
#include <algorithm>
#include <iostream>

std::vector<Player> loadRanking(const std::string& filename) {
    std::vector<Player> ranking;
    std::ifstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Error al abrir el archivo " << filename << std::endl;
        return ranking;
    }
    Player player;
    while (file >> player.name >> player.score) {
        ranking.push_back(player);
    }
    file.close();
    return ranking;
}

void saveRanking(const std::vector<Player>& ranking, const std::string& filename) {
    std::ofstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Error al abrir el archivo " << filename << std::endl;
        return;
    }
    for (const auto& player : ranking) {
        file << player.name << " " << player.score << std::endl;
    }
    file.close();
}

void on_ranking_button_clicked(GtkWidget *widget, gpointer data) {
    std::vector<Player> ranking = loadRanking("ranking.txt");
    std::sort(ranking.begin(), ranking.end(), [](const Player& a, const Player& b) {
        return a.score > b.score;
    });

    int numPlayersToShow = std::min(10, static_cast<int>(ranking.size()));

    GtkWidget *dialog = gtk_dialog_new_with_buttons("Ranking", NULL, GTK_DIALOG_MODAL, "Cerrar", GTK_RESPONSE_NONE, NULL);
    gtk_window_set_default_size(GTK_WINDOW(dialog), 800, 600);
    GtkWidget *content_area = gtk_dialog_get_content_area(GTK_DIALOG(dialog));

    GtkWidget *vbox = gtk_box_new(GTK_ORIENTATION_VERTICAL, 10);
    gtk_container_add(GTK_CONTAINER(content_area), vbox);

    GtkWidget *title_label = gtk_label_new(NULL);
    gtk_label_set_markup(GTK_LABEL(title_label), "<span font_desc='24' color='blue'><b>Ranking</b></span>");
    gtk_widget_set_halign(title_label, GTK_ALIGN_START);
    gtk_box_pack_start(GTK_BOX(vbox), title_label, FALSE, FALSE, 0);

    for (int i = 0; i < numPlayersToShow; ++i) {
        std::string rankText = std::to_string(i + 1) + ". " + ranking[i].name + " - " + std::to_string(ranking[i].score);
        GtkWidget *rank_label = gtk_label_new(NULL);
        gtk_label_set_text(GTK_LABEL(rank_label), rankText.c_str());

        PangoAttrList *attr_list = pango_attr_list_new();
        PangoAttribute *attr_size = pango_attr_size_new(18 * PANGO_SCALE);
        PangoAttribute *attr_color = pango_attr_foreground_new(65535, 42405, 0);
        pango_attr_list_insert(attr_list, attr_size);
        pango_attr_list_insert(attr_list, attr_color);
        gtk_label_set_attributes(GTK_LABEL(rank_label), attr_list);
        pango_attr_list_unref(attr_list);

        gtk_widget_set_halign(rank_label, GTK_ALIGN_START);
        gtk_box_pack_start(GTK_BOX(vbox), rank_label, FALSE, FALSE, 0);
    }

    gtk_widget_show_all(dialog);
    gtk_dialog_run(GTK_DIALOG(dialog));
    gtk_widget_destroy(dialog);
}
